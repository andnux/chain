apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'
group='com.github.andnux'
android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles 'consumer-rules.pro'
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }
}

dependencies {
    api fileTree(dir: 'libs', include: ['*.jar'])
    api project(path: ':sdk:core')
    api 'org.bouncycastle:bcprov-jdk15on:1.61'
    api 'org.bouncycastle:bcpkix-jdk15on:1.61'
    api 'androidx.appcompat:appcompat:1.1.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
}
if (isJar.toBoolean()){
    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.sourceFiles
    }

    task javadoc(type: Javadoc) {
        source = android.sourceSets.main.java.sourceFiles
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    task classesJar(type: Jar) {
        from "$buildDir/intermediates/classes/release"
    }

    artifacts {
        archives classesJar
        archives javadocJar
        archives sourcesJar
    }
}
